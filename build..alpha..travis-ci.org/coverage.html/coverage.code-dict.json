{"/home/travis/build/npmtest/node-npmtest-ember-prerender/test.js":"/* istanbul instrument in package npmtest_ember_prerender */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-prerender/lib.npmtest_ember_prerender.js":"/* istanbul instrument in package npmtest_ember_prerender */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_prerender = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_prerender = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-prerender/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-prerender && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_prerender */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_prerender\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_prerender.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_prerender.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_prerender.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_prerender.__dirname + '/lib.npmtest_ember_prerender.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-prerender/node_modules/ember-prerender/index.js":"module.exports = require('./lib');\n","/home/travis/build/npmtest/node-npmtest-ember-prerender/node_modules/ember-prerender/lib/index.js":"var PrerenderServer = require('./server');\n\nexports = module.exports = function(config) {\n  return new PrerenderServer(config);\n};\n","/home/travis/build/npmtest/node-npmtest-ember-prerender/node_modules/ember-prerender/lib/server.js":"var PrerenderLogger = require('./logger');\nvar PrerenderRenderer = require('./renderer');\nvar _ = require('lodash');\nvar http = require('http');\nvar url = require('url');\nvar request = require('request');\n\nfunction PrerenderServer(config) {\n  this.config = config;\n  this.logger = new PrerenderLogger(this.config.logging, 'Server ' + this.config.processNum);\n  this.renderer = new PrerenderRenderer(\n    _.extend({\n      initializationCallback: _.bind(this.afterRendererInit, this),\n      terminationCallback: _.bind(this.afterRendererTerminate, this)\n    }, this.config)\n  );\n  this.queue = [];\n}\n\n/*\n * Start the renderer and server\n */\nPrerenderServer.prototype.start = function() {\n  this.logger.log('server', \"Server listening on port \" + (this.config.port + this.config.processNum));\n  this.server = http.createServer(_.bind(this.onRequest, this)).listen((this.config.port + this.config.processNum));\n\n  this.logger.log('server', \"Starting rendering engine\");\n  this.renderer.startEngine();\n};\n\n/*\n * Check the queue after the renderer finishes initializing\n */\nPrerenderServer.prototype.afterRendererInit = function() {\n  this.processQueue();\n};\n\n/*\n * Stop accepting connections and exit the process when the renderer terminates\n */\nPrerenderServer.prototype.afterRendererTerminate = function() {\n  if (this.config.gracefulExit) {\n    this.server.close(function() {\n      process.exit();\n    });\n  } else {\n    process.exit();\n  }\n}\n\n/*\n * Handle a server request\n */\nPrerenderServer.prototype.onRequest = function(req, res) {\n  var addr = req.headers['x-forwarded-for'] || req.connection.remoteAddress;\n  var agent = req.headers['user-agent'] || \"Unknown\";\n  var user = addr + ' (' + agent + ')';\n  var reqUrl = this.parseURL(req.url);\n\n  req.once('end', function() {\n    // Close the socket once the response is sent to avoid keepalive issues\n    req.connection.destroy();\n  });\n\n  if (req.method !== 'GET') {\n    // Not a valid request method\n    this.logger.log('error', user + \" -> Received an unsupported \" + req.method + \" request: \" + reqUrl);\n    res.writeHead(405, {'Content-Type': 'text/html;charset=UTF-8'});\n    res.end(\"405 Method Not Allowed\");\n  } else if (reqUrl.match(this.config.filesMatch)) {\n    // Serve a static file\n    if (this.config.serveFilesLog) {\n      this.logger.log('server', user + \" -> Serving file: \" + reqUrl);\n    }\n    this.serveFile(req, res, reqUrl);\n  } else {\n    // Enqueue a rendering job\n    this.logger.log('server', user + \" -> Enqueueing route: \" + reqUrl);\n    this.enqueueJob(req, res, user, reqUrl);\n  }\n};\n\n/*\n * Enqueue a rendering job\n */\nPrerenderServer.prototype.enqueueJob = function(req, res, user, reqUrl) {\n  if (this.queue.length > this.config.maxQueueSize) {\n    this.logger.log('error', user + \" -> Request failed, queue reached the maximum configured size: \" + reqUrl);\n    res.writeHead(503, {'Content-Type': 'text/html;charset=UTF-8'});\n    res.end(\"503 Service Unvailable\");\n  } else {\n    this.queue.push({\n      req: req,\n      res: res,\n      queueTime: process.hrtime(),\n      user: user,\n      page: {\n        url: reqUrl,\n        statusCode: 500, // Default code in the event of a rendering error\n        html: \"500 Internal Server Error\"\n      },\n      callback: _.bind(this.sendPage, this)\n    });\n    this.processQueue();\n  }\n};\n\n/*\n * Process any jobs in the queue\n */\nPrerenderServer.prototype.processQueue = function() {\n  if (!this.renderer.busy && this.queue.length > 0) {\n    var job = this.queue.shift();\n    job.startTime = process.hrtime();\n    this.logger.log('server', job.user + \" -> Rendering route: \" + job.page.url);\n    this.renderer.renderPage(job);\n  }\n};\n\n/*\n * Send the rendered page\n */\nPrerenderServer.prototype.sendPage = function(job) {\n  var totalDuration = this.hrtimeToMs(process.hrtime(job.queueTime));\n  var renderDuration = this.hrtimeToMs(process.hrtime(job.startTime));\n  var queueDuration = parseInt(totalDuration - renderDuration, 10);\n\n  this.logger.log('server', job.user + \" -> Rendered page in \" + totalDuration + \"ms \" +\n                  \"(\" + queueDuration + \"ms in queue + \" + renderDuration + \"ms rendering) \" +\n                  \"with status code \" + job.page.statusCode + \": \" + job.page.url);\n\n  job.res.setHeader('Content-Length', Buffer.byteLength(job.page.html, 'utf8'));\n  job.res.writeHead(job.page.statusCode, {'Content-Type': 'text/html;charset=UTF-8'});\n  job.res.end(job.page.html);\n\n  this.renderer.jobFinished(job);\n  this.processQueue();\n};\n\n/*\n * Serve a static file\n */\nPrerenderServer.prototype.serveFile = function(req, res, reqUrl) {\n  if (this.config.serveFiles) {\n    var url = this.config.appUrl + reqUrl.substr(1);\n    request(url).pipe(res);\n  } else {\n    res.writeHead(500, {'Content-Type': 'text/html;charset=UTF-8'});\n    res.end(\"500 Internal Server Error\");\n  }\n};\n\n/*\n * Parse the full url into the path and query string\n */\nPrerenderServer.prototype.parseURL = function(reqURL) {\n  var parts = url.parse(reqURL, true);\n  if (parts.query._escaped_fragment_) {\n    parts.hash = '#!' + parts.query._escaped_fragment_;\n    delete parts.query._escaped_fragment_;\n    delete parts.search;\n  }\n  return url.format(parts);\n};\n\n/*\n * Convert hrtime to milliseconds\n */\nPrerenderServer.prototype.hrtimeToMs = function(hr) {\n  return (hr[0] * 1000 + parseInt(hr[1] / 1000000, 10));\n};\n\nmodule.exports = PrerenderServer;\n","/home/travis/build/npmtest/node-npmtest-ember-prerender/node_modules/ember-prerender/lib/logger.js":"var clc = require('cli-color');\nvar _ = require('lodash');\n\nfunction PrerenderLogger(config, prefix) {\n  this.config = config;\n  this.prefix = prefix;\n\n  this.levels = {\n    debug: 0,\n    renderer: 1,\n    server: 2,\n    error: 3\n  };\n\n  this.formats = {\n    debug: function(val) {\n      return clc.blackBright(val);\n    },\n    renderer: function(val) {\n      return clc.blueBright(val);\n    },\n    server: function(val) {\n      return clc.cyan(val);\n    },\n    error: function(val) {\n      return clc.red(val);\n    }\n  };\n}\n\n/*\n * Utility class for prerender logging\n */\nPrerenderLogger.prototype.log = function(level) {\n  var _this = this;\n\n  if (this.levels[this.config.level] > this.levels[level]) {\n    return;\n  }\n\n  var args = [].slice.call(arguments);\n  args.shift();\n\n  args.unshift('[' + this.prefix + ']');\n\n  if (this.config.timestamp) {\n    var timestamp = new Date().toISOString();\n    if (this.config.format) {\n      timestamp = clc.inverse(timestamp);\n    }\n    args.unshift(timestamp);\n  }\n\n  if (this.config.format) {\n    args = _.map(args, function(arg) {\n      if (typeof arg !== 'string') {\n        try {\n          arg = JSON.stringify(arg);\n        } catch (e) {\n        }\n      }\n      return _this.formats[level](arg);\n    });\n  }\n\n  console.log.apply(this, args);\n};\n\nmodule.exports = PrerenderLogger;\n","/home/travis/build/npmtest/node-npmtest-ember-prerender/node_modules/ember-prerender/lib/renderer.js":"var PrerenderLogger = require('./logger');\nvar _ = require('lodash');\n\nfunction PrerenderRenderer(config) {\n  this.config = config;\n  this.logger = new PrerenderLogger(this.config.logging, 'Renderer ' + this.config.processNum);\n  this.plugins = this.loadPlugins();\n  this.engine = this.loadEngine();\n\n  process.on('SIGUSR2', _.bind(function() {\n    this.logger.log('renderer', \"Received SIGUSR2 signal, restarting rendering engine\");\n    this.restartEngine();\n  }, this));\n}\n\n/*\n * Initialize the renderer and associated rendering engine (JSDOM, PhantomJS, WebDriverJs)\n */\nPrerenderRenderer.prototype.startEngine = function() {\n  var _this = this;\n\n  this.logger.log('renderer', \"Engine starting up (\" + this.config.engine + \")\");\n  this.numRequests = 0;\n  this.startTime = process.hrtime();\n  this.initializeTimer = setTimeout(_.bind(this.onInitializeTimeout, this), this.config.initializeTimeout);\n  this.busy = true;\n\n  _this.engine.init(\n    this.config.appUrl,\n    _.bind(_this.afterEngineInit, _this),\n    _.bind(_this.onEngineError, _this),\n    _.bind(_this.beforeEngineInit, _this)\n  );\n};\n\n/*\n * Shutdown the rendering engine\n */\nPrerenderRenderer.prototype.stopEngine = function() {\n  this.logger.log('renderer', \"Engine shutting down\");\n\n  clearTimeout(this.initializeTimer);\n  clearTimeout(this.renderTimer);\n  this.initializeTimer = null;\n  this.renderTimer = null;\n\n  if (this.job) {\n    this.logger.log('error', \"Engine stopped before rendering: \" + this.job.page.url);\n    this.terminateActiveJob();\n  }\n  this.engine.shutdown();\n};\n\n/*\n * Restart the rendering engine\n */\nPrerenderRenderer.prototype.restartEngine = function() {\n  this.stopEngine();\n  this.startEngine();\n};\n\nPrerenderRenderer.prototype.terminateActiveJob = function() {\n  if (this.job) {\n    this.job.page.statusCode = 503;\n    this.job.page.html = '503 Service Unavailable';\n    this.job.callback(this.job);\n  }\n};\n\n/*\n * Handle abnormal rendering engine exits\n */\nPrerenderRenderer.prototype.onEngineError = function(msg, trace) {\n  if (this.initializeTimer) {\n    this.logger.log('error', \"Restarting rendering engine in \" + this.config.initializeTimeout + \" seconds after it failed with error:\", msg, trace);\n  } else {\n    this.logger.log('error', \"Restarting rendering engine after it failed with error:\", msg, trace);\n    this.restartEngine();\n  }\n};\n\n/*\n * Engine's page object created\n */\nPrerenderRenderer.prototype.beforeEngineInit = function(callback) {\n  this.pluginEvent('beforeEngineInit', [this, this.engine], callback);\n};\n\n/*\n * Rendering engine initialization finished\n */\nPrerenderRenderer.prototype.afterEngineInit = function() {\n  clearTimeout(this.initializeTimer);\n  this.initializeTimer = null;\n\n  var duration = this.hrtimeToMs(process.hrtime(this.startTime));\n  this.logger.log('renderer', \"Renderer initialized after \" + duration + \"ms\");\n  this.busy = false;\n  this.config.initializationCallback();\n};\n\n/*\n * Serve a page/route from the rendering engine\n */\nPrerenderRenderer.prototype.renderPage = function(job) {\n  var _this = this;\n\n  this.busy = true;\n  this.job = job;\n  this.numRequests++;\n\n  var req = this.job.req;\n  var res = this.job.res;\n  var page = this.job.page;\n\n  this.pluginEvent('beforeRender', [req, res, page], function() {\n    _this.job.req = req;\n    _this.job.res = res;\n    _this.job.page = page;\n\n    if (_this.job.page.statusCode < 500) {\n      _this.logger.log('renderer', \"Skipped rendering, cached page returned by plugin: \" + _this.job.page.url);\n      _this.busy = false;\n      _this.job.callback(_this.job);\n    } else {\n      _this.logger.log('renderer', \"Rendering: \" + _this.job.page.url);\n      _this.renderTimer = setTimeout(_.bind(_this.onRenderTimeout, _this), _this.config.renderTimeout);\n      _this.engine.loadRoute(_this.job.page, _.bind(_this.afterRender, _this));\n    }\n  });\n};\n\n/*\n * Run post-processing plugins on the page object and notify master when page\n * rendering has completed\n */\nPrerenderRenderer.prototype.afterRender = function(page) {\n  var _this = this;\n\n  clearTimeout(this.renderTimer);\n  this.renderTimer = null;\n\n  this.logger.log('renderer', \"Rendering finished\");\n  if (this.job) {\n    var req = this.job.req;\n    var res = this.job.res;\n\n    this.pluginEvent('beforeSend', [req, res, page], function() {\n      _this.job.req = req;\n      _this.job.res = res;\n      _this.job.page = page;\n\n      if (_this.numRequests >= _this.config.maxRequestsPerRenderer) {\n        if (_this.config.exitAfterMaxRequests) {\n          _this.logger.log('error', \"Rendering engine reached the maximum allowed number of requests, exiting process\");\n          if (_this.config.gracefulExit) {\n            _this.numRequests = 0;\n            _this.busy = false;\n            _this.job.callback(_this.job);\n          }\n          _this.config.terminationCallback();\n        } else {\n          _this.logger.log('error', \"Rendering engine reached the maximum allowed number of requests, restarting engine\");\n          _.bind(_this.restartEngine, _this)();\n        }\n      } else {\n        _this.busy = false;\n        _this.job.callback(_this.job);\n      }\n    });\n  } else {\n    this.busy = false;\n  }\n};\n\n/*\n* Job finished and the response has been sent\n*/\nPrerenderRenderer.prototype.jobFinished = function(job) {\n  this.job = null;\n  this.pluginEvent('jobFinished', [job]);\n};\n\n/*\n * Handle renderer initialization timeouts\n */\nPrerenderRenderer.prototype.onInitializeTimeout = function() {\n  this.logger.log('error', \"Restarting renderer, timed out while initializing\");\n  this.restartEngine();\n};\n\n/*\n * Handle rendering timeouts\n */\nPrerenderRenderer.prototype.onRenderTimeout = function() {\n  var _this = this;\n\n  if (this.job) {\n    this.logger.log('error', \"Timed out while rendering: \" + this.job.page.url);\n    this.terminateActiveJob();\n  }\n\n  this.pluginEvent('onRenderTimeout', [_this, this.job], function() {\n    _this.busy = false;\n  });\n};\n\n/*\n * Load and return the plugins\n */\nPrerenderRenderer.prototype.loadPlugins = function() {\n  var _this = this;\n  var plugins = [];\n\n  this.config.plugins.forEach(function(plugin) {\n    if (typeof plugin === 'string') {\n      plugin = require('./plugins/' + plugin);\n    }\n\n    plugins.push(plugin);\n\n    if (typeof plugin.init === 'function') {\n      plugin.init(_this);\n    }\n  });\n  return plugins;\n};\n\n/*\n * Execute methodName on each plugin\n */\nPrerenderRenderer.prototype.pluginEvent = function(methodName, args, callback) {\n  var _this = this;\n  var index = 0;\n\n  callback = callback || function() {};\n\n  var next = function() {\n    var layer = _this.plugins[index++];\n    if (!layer) {\n      return callback();\n    }\n    var method = layer[methodName];\n    if (method) {\n      method.apply(layer, args);\n    } else {\n      next();\n    }\n  };\n\n  args.push(next);\n  next();\n};\n\n/*\n * Start the rendering engine\n */\nPrerenderRenderer.prototype.loadEngine = function() {\n  var PrerenderEngine;\n  switch (this.config.engine) {\n    case 'jsdom':\n      PrerenderEngine = require('./engines/jsdom.js');\n      break;\n    case 'phantom':\n      PrerenderEngine = require('./engines/phantom.js');\n      break;\n    case 'webdriver':\n      PrerenderEngine = require('./engines/webdriver.js');\n      break;\n    default:\n      this.logger.log('error', \"No engine was specified, valid options: jsdom, phantom, webdriver\");\n      process.exit(2);\n  }\n  return new PrerenderEngine(this.config, this.logger);\n};\n\n/*\n * Convert hrtime to milliseconds\n */\nPrerenderRenderer.prototype.hrtimeToMs = function(hr) {\n  return (hr[0] * 1000 + parseInt(hr[1] / 1000000, 10));\n};\n\nmodule.exports = PrerenderRenderer;\n","/home/travis/build/npmtest/node-npmtest-ember-prerender/node_modules/ember-prerender/server.js":"var prerender = require('./lib');\nvar _ = require('lodash');\n\n// Default configuration values:\nvar config = {\n  port: 3000,\n  processNum: 0,\n  engine: \"phantom\",\n  contentReadyDelay: 0,\n  initializeTimeout: 25000,\n  renderTimeout: 15000,\n  maxRequestsPerRenderer: 100,\n  exitAfterMaxRequests: false,\n  gracefulExit: true,\n  maxQueueSize: 50,\n  appUrl: \"http://localhost:4200/\",\n  serveFiles: true,\n  serveFilesLog: true,\n  filesMatch: /\\.(?:css|js|jpg|png|gif|ico|svg|woff|woff2|ttf|swf|map)(?:\\?|$)/i,\n  ignoreAssets: /google-analytics\\.com|fonts\\.googleapis\\.com|typekit\\.com|platform\\.twitter\\.com|connect\\.facebook\\.net|apis\\.google\\.com|\\.css(?:\\?|$)/,\n  logging: {\n    level: \"debug\",\n    timestamp: true,\n    format: true\n  },\n  plugins: [\n    \"removeScriptTags\",\n    \"httpHeaders\"\n  ]\n};\n\nif (process.env.CONFIG) {\n  var userConfig = require(process.env.CONFIG);\n  _.merge(config, userConfig);\n}\n\nif (process.env.PROCESS_NUM) {\n  config.processNum = parseInt(process.env.PROCESS_NUM, 10);\n}\n\nvar server = prerender(config);\nserver.start();\n","/home/travis/build/npmtest/node-npmtest-ember-prerender/node_modules/ember-prerender/lib/plugins/removeScriptTags.js":"module.exports = {\n  beforeSend: function(req, res, page, next) {\n    if (!page.html) {\n      return next();\n    }\n\n    // Note: Stripping of comments is now handled in the minifyHtml plugin\n    //var stripCommentsRe = /<!--(?!\\[if)[\\S\\s]*?(?!<!\\[endif\\])-->/g;\n    //page.html = page.html.replace(stripCommentsRe, '');\n\n    var stripScriptsRe = /<(?:script|iframe)(?! data-preserve=\"true\")[^>]*>[\\S\\s]*?<\\/(?:script|iframe)>/g;\n    page.html = page.html.replace(stripScriptsRe, '');\n\n    next();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-prerender/node_modules/ember-prerender/lib/plugins/httpHeaders.js":"module.exports = {\n  beforeSend: function(req, res, page, next) {\n    if (page.html) {\n      var headerMatch = /<meta property=['\"]prerender:([^'\"]+)['\"] content=['\"]([^'\"]+)['\"]>/g;\n      var head = page.html.split('</head>', 1).pop();\n      var match;\n\n      while ((match = headerMatch.exec(head))) {\n        switch (match[1]) {\n          case 'status-code':\n            page.statusCode = parseInt(match[2], 10);\n            if (page.statusCode == 301 || page.statusCode == 302) {\n              page.html = 'Moved';\n            }\n            break;\n          case 'header':\n            var pos = match[2].indexOf(': ');\n            if (pos > 0) {\n              var headerName = match[2].slice(0, pos);\n              var headerValue = match[2].slice(pos+2);\n              if (headerName === 'Location') {\n                headerValue = decodeURIComponent(headerValue);\n              }\n              res.setHeader(headerName, headerValue);\n            }\n            break;\n        }\n      }\n    }\n\n    next();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-prerender/node_modules/ember-prerender/lib/engines/phantom.js":"var _ = require('lodash');\nvar phantomjs = require('phantomjs');\nvar phantom = require('phantom');\n\nfunction PhantomEngine(config, logger) {\n  this.config = config;\n  this.logger = logger;\n  this.engineSettings = {\n    binary: phantomjs.path,\n    userAgent: 'Prerender',\n    loadImages: false,\n    localToRemoteUrlAccessEnabled: true,\n    webSecurityEnabled: true\n  };\n}\n\n/*\n * Initialize the page\n */\nPhantomEngine.prototype.init = function(appUrl, initCallback, errorCallback, beforeInitCallback) {\n  var _this = this;\n\n  this.initializationCallback = initCallback;\n  this.hasInitializationCallback = true;\n  this.contentReadyTimer = null;\n\n  this.engineSettings.onExit = function(code, signal) {\n    if (code !== 0) {\n      errorCallback(\"Erroneous exit code: \" + code, signal);\n    }\n  };\n\n  this.phantom = phantom.create(\"--load-images=false\", \"--ignore-ssl-errors=true\", \"--ssl-protocol=any\", this.engineSettings, function(ph) {\n    _this.phantom.ph = ph;\n    _this.phantom.ph.createPage(function(phantomPage) {\n      _this.phantom.page = phantomPage;\n\n      _this.phantom.page.set('onConsoleMessage', function(msg) {\n        _this.logger.log('debug', '>>>', msg);\n      });\n\n      _this.phantom.page.set('onCallback', _.bind(_this.onPageReady, _this));\n\n      _this.phantom.page.set('onError', function(msg) {\n        errorCallback(\"Phantom encountered an error: \" + msg);\n      });\n\n      // FIXME: Uncomment after resolving issue in phantomjs-node (https://github.com/sgentle/phantomjs-node/issues/203)\n      //_this.phantom.page.set('onResourceRequested', function(requestData, networkRequest) {\n      //  if (_this.config.ignoreAssets.test(requestData.url)) {\n      //    _this.logger.log('error', \"Ignored the following resource request:\", requestData.url);\n      //    networkRequest.abort();\n      //  }\n      //});\n      _this.phantom.page.onResourceRequested(function(requestData, networkRequest) {\n        if (/google-analytics\\.com|fonts\\.googleapis\\.com|typekit\\.com|platform\\.twitter\\.com|connect\\.facebook\\.net|apis\\.google\\.com|\\.css(?:\\?|$)/.test(requestData.url)) {\n          networkRequest.abort();\n        }\n      }, function(requestData) {});\n\n      _this.phantom.page.set('onResourceError', function(error) {\n        if (error.url != '') {\n          _this.logger.log('error', \"Phantom encountered an error loading a resource:\", error);\n        }\n      });\n\n      _this.phantom.page.set('viewportSize', {\n        width: 1024,\n        height: 768\n      });\n\n      _this.phantom.page.set('onInitialized', function() {\n        _this.phantom.page.evaluate(function() {\n          window.isPrerender = true;\n          document.addEventListener('XContentReady', function() {\n            window.callPhantom();\n          }, false);\n        });\n      });\n\n      beforeInitCallback(function() {\n        _this.phantom.page.open(appUrl);\n      });\n    });\n  });\n};\n\n/*\n * Load a route\n */\nPhantomEngine.prototype.loadRoute = function(page, callback) {\n  this.currentPage = page;\n  this.pageCallback = callback;\n  this.hasPageCallback = true;\n\n  clearTimeout(this.contentReadyTimer);\n\n  this.phantom.page.evaluate(function(url) {\n    window.prerenderTransitionEvent.url = url;\n    document.dispatchEvent(window.prerenderTransitionEvent);\n  }, null, page.url);\n};\n\n/*\n * Callback handler for when a page finishes rendering\n */\nPhantomEngine.prototype.onPageReady = function() {\n  var _this = this;\n\n  if (this.hasInitializationCallback) {\n    this.hasInitializationCallback = false;\n    this.initializationCallback();\n  } else {\n    this.contentReadyTimer = setTimeout(function() {\n      _this.phantom.page.evaluate(\n        function() {\n          var html = document.documentElement.outerHTML;\n          if (document.doctype) {\n            html = \"<!DOCTYPE \" + document.doctype.name + \">\\n\" + html;\n          }\n          return html;\n        },\n        function (html) {\n          if (_this.hasPageCallback) {\n            _this.hasPageCallback = false;\n            _this.currentPage.statusCode = 200;\n            _this.currentPage.html = html;\n            _this.pageCallback(_this.currentPage);\n          }\n        }\n      );\n    }, this.config.contentReadyDelay);\n  }\n};\n\n/*\n * Destroy the phantom process\n */\nPhantomEngine.prototype.shutdown = function() {\n  clearTimeout(this.contentReadyTimer);\n  if (this.phantom && this.phantom.ph) {\n    this.phantom.ph.exit();\n  }\n};\n\nmodule.exports = PhantomEngine;\n","/home/travis/build/npmtest/node-npmtest-ember-prerender/node_modules/ember-prerender/lib/engines/jsdom.js":"var jsdom = require('jsdom');\nvar _ = require('lodash');\nvar d = require('domain').create();\n\nfunction JSDomEngine(config, logger) {\n  this.config = config;\n  this.logger = logger;\n  this.config.engineSettings = {\n    FetchExternalResources: ['script', 'iframe'],\n    ProcessExternalResources: ['script', 'iframe'],\n    SkipExternalResources: this.config.ignoreAssets,\n    MutationEvents: '2.0',\n    QuerySelector: false\n  };\n}\n\n/*\n * Initialize the page\n */\nJSDomEngine.prototype.init = function(appUrl, initCallback, errorCallback, beforeInitCallback) {\n  var _this = this;\n\n  this.initializationCallback = initCallback;\n  this.hasInitializationCallback = true;\n  this.errorCallback = errorCallback;\n  this.beforeInitCallback = beforeInitCallback;\n  this.contentReadyTimer = null;\n\n  d.on('error', function(error) {\n    _this.logger.log('error', 'JSDOM encountered a fatal error:', error.message);\n    process.exit(1);\n  });\n\n  d.run(function() {\n    try {\n      _this.beforeInitCallback(function() {\n        jsdom.env({\n          url: appUrl,\n          features: _this.config.engineSettings,\n          done: function(errors, window) {\n            _this.window = window;\n            _this.document = window.document;\n\n            _this.document.addEventListener('XContentReady', _.bind(_this.onPageReady, _this));\n            _this.window = _this.document.parentWindow;\n            _this.window.isPrerender = true;\n            //_this.window.onerror = this.errorCallback;  // Not implemented by JSDOM\n            _this.window.resizeTo(1024, 768);\n            _this.window.navigator.mimeTypes = [];  // Not implememented by JSDOM\n            _this.bindConsole();\n          }\n        });\n      });\n    } catch (error) {\n      _this.errorCallback(error.message);\n    }\n  });\n};\n\n/*\n * Load a route\n */\nJSDomEngine.prototype.loadRoute = function(page, callback) {\n  this.currentPage = page;\n  this.pageCallback = callback;\n  this.hasPageCallback = true;\n\n  clearTimeout(this.contentReadyTimer);\n\n  var _this = this;\n\n  // XXX: JSDOM does not currently support push state so update window.location manually\n  var urlParts = page.url.split('?');\n  this.window.location.href = this.config.appUrl.substr(0, this.config.appUrl.length - 1) + urlParts[0];\n  this.window.location.search = urlParts[1] || '';\n\n  d.run(function() {\n    try {\n      _this.window.prerenderTransitionEvent.url = page.url;\n      _this.window.document.dispatchEvent(_this.window.prerenderTransitionEvent);\n    } catch (error) {\n      _this.logger.log('error', 'JSDOM encountered an error while loading the route:', error.message);\n    }\n  });\n};\n\n/*\n * Callback handler for when a page finishes loading\n */\nJSDomEngine.prototype.onPageReady = function() {\n  var _this = this;\n\n  if (this.hasInitializationCallback) {\n    this.hasInitializationCallback = false;\n    this.initializationCallback();\n  } else {\n    this.contentReadyTimer = setTimeout(function() {\n      if (_this.hasPageCallback) {\n        _this.hasPageCallback = false;\n        var html = _this.window.document.documentElement.outerHTML;\n        if (_this.window.document.doctype) {\n          html = \"<!DOCTYPE \" + _this.window.document.doctype.name + \">\\n\" + html;\n        }\n        _this.currentPage.statusCode = 200;\n        _this.currentPage.html = html;\n        _this.pageCallback(_this.currentPage);\n      }\n    }, this.config.contentReadyDelay);\n  }\n};\n\n/*\n * Destroy the jsdom document\n */\nJSDomEngine.prototype.shutdown = function() {\n  clearTimeout(this.contentReadyTimer);\n  this.window.close();\n  clearInterval(this.errorTimer);\n};\n\n/*\n * Bind JSDom console logging output to PrerenderLogger debug log\n */\nJSDomEngine.prototype.bindConsole = function() {\n  var _this = this;\n\n  var methods = ['log', 'debug', 'info', 'warn', 'error'];\n\n  methods.forEach(function(method) {\n    _this.window.console[method] = function() {\n      var args = [].slice.call(arguments);\n      args.unshift('debug', '>>>');\n      return _this.logger.log.apply(_this.logger, args);\n    };\n  });\n\n  // Error messages are currently a special case\n  this.errorTimer = setInterval(_.bind(this.logErrors, this), 2000);\n};\n\n/*\n * Log script errors\n */\nJSDomEngine.prototype.logErrors = function() {\n  var _this = this;\n\n  if (this.document.errors.length > 0) {\n    this.document.errors.forEach(function(error) {\n      if (error.message.indexOf('NOT IMPLEMENTED') === -1) {\n        //console.log(error);\n        _this.logger.log('error', error.message);\n      }\n    });\n    this.document.errors = [];\n  }\n};\n\nmodule.exports = JSDomEngine;\n","/home/travis/build/npmtest/node-npmtest-ember-prerender/node_modules/ember-prerender/lib/engines/webdriver.js":"var webdriver = require('selenium-webdriver');\nvar chromedriver = require('chromedriver');\nvar path = require('path');\nvar _ = require('lodash');\n\nfunction WebDriverEngine(config, logger) {\n  this.config = config;\n  this.logger = logger;\n}\n\n/*\n * Initialize the page\n */\nWebDriverEngine.prototype.init = function(appUrl, initCallback, errorCallback, beforeInitCallback) {\n  var _this = this;\n\n  this.initializationCallback = initCallback;\n  this.hasInitializationCallback = true;\n  this.contentReadyTimer = null;\n\n  process.env['PATH'] = path.dirname(chromedriver.path) + ':' + process.env['PATH'];\n\n  this.driver = new webdriver.Builder().withCapabilities(\n    webdriver.Capabilities.chrome()\n    //webdriver.Capabilities.firefox()\n  ).build();\n\n  beforeInitCallback(function() {\n    _this.driver.get(appUrl);\n\n    // TODO: Bind console messages, set viewport size, etc\n    _this.driver.executeScript(\n      \"window.isPrerender = true;\" +\n\n      \"window.XContentReadyFlag = false;\" +\n      \"document.addEventListener('XContentReady', function() {\" +\n        \"window.XContentReadyFlag = true;\" +\n      \"}, false);\" +\n\n      \"window.jsErrors = [];\" +\n      \"window.onerror = function(errorMessage) {\" +\n        \"window.jsErrors.push(errorMessage);\" +\n      \"};\"\n    );\n\n    // Hack: the above event listener script that sets window.XContentReadyFlag is sometimes\n    //       executed after the page has already loaded\n    var _maxTries = 5;\n    var _checkInterval = 100;\n\n    _this.readyTimer = setInterval(function() {\n      return _this.driver.executeScript(\n        \"return {\" +\n          \"ready: window.XContentReadyFlag,\" +\n          \"errors: window.jsErrors\" +\n        \"};\"\n      ).then(function(result) {\n        if (result.errors.length) {\n          errorCallback(\"Phantom encountered an error: \" + result.errors.join());\n        } else if (result.ready || (_this.hasInitializationCallback && _maxTries <= 0)) {\n          _this.driver.executeScript(\"window.XContentReadyFlag = false;\");\n          _.bind(_this.onPageReady, _this)();\n        } else if (_this.hasInitializationCallback) {\n          _maxTries--;\n        }\n      });\n    }, _checkInterval);\n  });\n};\n\n/*\n * Load a route\n */\nWebDriverEngine.prototype.loadRoute = function(page, callback) {\n  var _this = this;\n\n  this.currentPage = page;\n  this.pageCallback = callback;\n  this.hasPageCallback = true;\n\n  clearTimeout(this.contentReadyTimer);\n\n  this.driver.executeScript(\n    \"window.XContentReadyFlag = false;\" +\n    \"window.prerenderTransitionEvent.url = '\" + page.url + \"';\" +\n    \"window.document.dispatchEvent(window.prerenderTransitionEvent);\"\n  );\n};\n\n/*\n * Callback handler for when a page finishes rendering\n */\nWebDriverEngine.prototype.onPageReady = function() {\n  var _this = this;\n\n  if (this.hasInitializationCallback) {\n    this.hasInitializationCallback = false;\n    this.initializationCallback();\n  } else {\n    this.contentReadyTimer = setTimeout(function() {\n      _this.driver.getPageSource().then(function(html) {\n        if (_this.hasPageCallback) {\n          _this.hasPageCallback = false;\n          _this.currentPage.statusCode = 200;\n          _this.currentPage.html = html;\n          _this.pageCallback(_this.currentPage);\n        }\n      });\n    }, this.config.contentReadyDelay);\n  }\n};\n\n/*\n * Destroy the webdriver process\n */\nWebDriverEngine.prototype.shutdown = function() {\n  clearInterval(this.readyTimer);\n  clearTimeout(this.contentReadyTimer);\n\n  if (this.driver) {\n    this.driver.quit();\n  }\n};\n\nmodule.exports = WebDriverEngine;\n","/home/travis/build/npmtest/node-npmtest-ember-prerender/node_modules/ember-prerender/lib/plugins/inMemoryHtmlCache.js":"var cache_manager = require('cache-manager');\n\nmodule.exports = {\n  init: function() {\n    this.cache = cache_manager.caching({\n      store: 'memory', max: 100, ttl: 60/*seconds*/\n    });\n  },\n\n  beforeRender: function(req, res, page, next) {\n    this.cache.get(page.url, function(err, result) {\n      if (!err && result) {\n        page.statusCode = 200;\n        page.html = result;\n      } else {\n        next();\n      }\n    });\n  },\n\n  beforeSend: function(req, res, page, next) {\n    this.cache.set(page.url, page.html);\n    next();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-prerender/node_modules/ember-prerender/lib/plugins/minifyHtml.js":"var Minimize = require('minimize');\nvar minimize = new Minimize({\n  empty: false,       // KEEP empty attributes\n  cdata: true,        // KEEP CDATA from scripts\n  comments: false,    // KEEP comments\n  ssi: false,         // KEEP Server Side Includes\n  conditionals: true, // KEEP conditional internet explorer comments\n  spare: false,       // KEEP redundant attributes\n  quotes: true,       // KEEP arbitrary quotes\n  loose: false        // KEEP one whitespace\n});\n\nmodule.exports = {\n  beforeSend: function(req, res, page, next) {\n    if (!page.html) {\n      return next();\n    }\n\n    minimize.parse(page.html, function(error, minified) {\n      if (!error) {\n        page.html = minified;\n      }\n      next();\n    });\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-prerender/node_modules/ember-prerender/lib/plugins/mongoHtmlCache.js":"var MongoClient = require('mongodb').MongoClient;\n\nvar mongoURI = process.env.MONGO_URI || 'mongodb://localhost/ember-prerender';\nvar mongoCollection = process.env.MONGO_COLL || 'pages';\nvar cacheTTL = process.env.CACHE_TTL || 14400;\n\nvar collection;\n\nMongoClient.connect(mongoURI, function(err, db) {\n  if (db) {\n    db.collection(mongoCollection, function(err, coll) {\n      collection = coll;\n\n      // Currently keeping records in mongo indefinitely and checking the date delta in beforeRender,\n      // an alternative option is to have Mongo expire the record automatically\n      //collection.ensureIndex({ createdOn: 1 }, { expireAfterSeconds: cacheTTL });\n    });\n }\n});\n\nmodule.exports = {\n  beforeRender: function(req, res, page, next) {\n    if (req.headers['x-cache-invalidate'] || !collection) {\n      // Skip cache for POST/PUT requests or if no DB collection is available\n      return next();\n    }\n    collection.findOne({ url: page.url }, function(err, result) {\n      if (!err && result && result.html) {\n        if (((new Date() - result.ts) / 1000) <= cacheTTL) {\n          page.statusCode = result.status || 200;\n          if ((page.statusCode === 301 || page.statusCode === 302) && result.location) {\n            res.setHeader('Location', result.location);\n          }\n          page.html = result.html;\n        }\n      }\n      next();\n    });\n  },\n\n  beforeSend: function(req, res, page, next) {\n    if (page.statusCode < 400) {\n      var object = {\n        url: page.url,\n        status: page.statusCode,\n        html: page.html,\n        ts: new Date()\n      };\n      if (page.statusCode === 301 || page.statusCode === 302) {\n        var location = res.getHeader('Location');\n        if (location) {\n          object.location = location;\n        }\n      }\n      collection.update({ url: object.url }, object, { upsert: true }, function (err) {\n        // Ignored\n      });\n    }\n    next();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-prerender/node_modules/ember-prerender/lib/plugins/prepareEmail.js":"module.exports = {\n  beforeSend: function(req, res, page, next) {\n    if (page.url.indexOf('/email/') === 0) {\n      var subjectRe = /<title>(.*?)<\\/title>/;\n      var subject = page.html.match(subjectRe);\n\n      var bodyRe = /<section id=\"email-message\">(.*?)<\\/section>/;\n      var body = page.html.match(bodyRe);\n      if (subject && subject.length > 1 && body && body.length > 1) {\n        page.html = \"<!doctype html>\\n\" +\n          \"<html lang=\\\"en\\\">\\n\" +\n          \"<head>\\n\" +\n          \"  <meta charset=\\\"utf-8\\\">\\n\" +\n          \"  <title>\" + subject[1] + \"</title>\\n\" +\n          \"  <meta name=\\\"robots\\\" content=\\\"noindex,nofollow\\\">\\n\" +\n          \"</head>\\n\" +\n          \"<body>\\n\" +\n            body[1] + \"\\n\" +\n          \"</body>\\n\" +\n          \"</html>\";\n      } else {\n        page.statusCode = 500;\n        page.html = \"500 Internal Server Error\";\n      }\n    }\n\n    next();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-prerender/node_modules/ember-prerender/lib/plugins/prettyPrintHtml.js":"var pretty = require('pretty');\n\nmodule.exports = {\n  beforeSend: function(req, res, page, next) {\n    if (!page.html) {\n      return next();\n    }\n    page.html = pretty(page.html);\n    next();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-prerender/node_modules/ember-prerender/lib/plugins/s3HtmlCache.js":"var cache_manager = require('cache-manager');\nvar s3 = new (require('aws-sdk')).S3({params:{Bucket: process.env.S3_BUCKET_NAME}});\n\nvar cacheTTL = process.env.CACHE_TTL || 14400;\n\nvar s3_cache = {\n  get: function(key, callback) {\n    if (process.env.S3_PREFIX_KEY) {\n      key = process.env.S3_PREFIX_KEY + '/' + key;\n    }\n\n    s3.getObject({\n      Key: key\n    }, callback);\n  },\n  set: function(key, value, callback) {\n    if (process.env.S3_PREFIX_KEY) {\n      key = process.env.S3_PREFIX_KEY + '/' + key;\n    }\n\n    var request = s3.putObject({\n      Key: key,\n      ContentType: 'text/html;charset=UTF-8',\n      StorageClass: 'REDUCED_REDUNDANCY',\n      Body: value\n    }, callback);\n\n    if (!callback) {\n      request.send();\n    }\n  }\n};\n\nmodule.exports = {\n  init: function() {\n    this.cache = cache_manager.caching({\n      store: s3_cache,\n      ttl: cacheTTL\n    });\n  },\n\n  beforeRender: function(req, res, page, next) {\n    if (req.headers['x-cache-invalidate']) {\n      // Skip cache\n      return next();\n    }\n    this.cache.get(page.url, function(err, result) {\n      if (!err && result) {\n        page.statusCode = 200;\n        page.html = result.Body;\n      }\n      next();\n    });\n  },\n\n  beforeSend: function(req, res, page, next) {\n    this.cache.set(page.url, page.html);\n    next();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-prerender/node_modules/ember-prerender/lib/plugins/transparent.js":"var request = require('request');\n\nmodule.exports = {\n  beforeSend: function(req, res, page, next) {\n    if (page.url.indexOf('_escaped_fragment_=') < 0 &&\n        page.url.indexOf('prerender=1') < 0 &&\n        page.statusCode === 200) {\n      var domain = req.headers.host;\n      request('https://' + domain, function(error, response, body) {\n        if (!error && response.statusCode === 200) {\n          page.html = body;\n        }\n        next();\n      })\n    } else {\n      next();\n    }\n  }\n};\n"}